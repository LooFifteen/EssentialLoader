repositories {
    maven { url "https://maven.minecraftforge.net/" }
    maven { url "https://repo.spongepowered.org/maven" }
}

sourceSets {
    exampleMod
    example2Mod
    oldKotlinMod
    essential
    dummyStage1
    dummyStage2
    dummyStage3
    minecraft10808
    minecraft11202
}

configurations {
    forge10808Runtime
    forge11202Runtime
    minecraft10808CompileOnly.extendsFrom(forge10808Runtime)
    minecraft11202CompileOnly.extendsFrom(forge11202Runtime)

    example2ModImplementation.extendsFrom(exampleModImplementation)
    example2ModCompileOnly.extendsFrom(exampleModCompileOnly)

    mixin07
    mixin08
    asm52
}

dependencies {
    def launchwrapper = "net.minecraft:launchwrapper:1.12"
    // Intentionally using a different version than stage1 to make sure it can determine the version correctly
    def forge = "net.minecraftforge:forge:1.8.8-11.15.0.1655:universal"

    implementation(project.parent.project("common"))

    // Versions based on the one which MC include by default in 1.8.9 (minimal supported version)
    // See https://github.com/MultiMC/meta-multimc/blob/master/net.minecraft/1.8.9.json
    forge10808Runtime(launchwrapper)
    forge10808Runtime("org.apache.commons:commons-lang3:3.3.2")
    forge10808Runtime("commons-io:commons-io:2.4")
    forge10808Runtime("commons-codec:commons-codec:1.9")
    forge10808Runtime("org.apache.logging.log4j:log4j-api:2.0-beta9")
    forge10808Runtime("org.apache.logging.log4j:log4j-core:2.0-beta9")
    forge10808Runtime("com.google.code.gson:gson:2.2.4")
    forge10808Runtime("com.google.guava:guava:17.0")
    forge10808Runtime("com.mojang:authlib:1.5.21")
    // Forge
    forge10808Runtime(forge)
    forge10808Runtime("lzma:lzma:0.0.1")

    // Versions based on the one which MC (on MultiMC) includes by default in 1.12.2
    // See https://github.com/MultiMC/meta-multimc/blob/master/net.minecraft/1.12.2.json
    forge11202Runtime(launchwrapper)
    forge11202Runtime("org.apache.commons:commons-lang3:3.5")
    forge11202Runtime("commons-io:commons-io:2.5")
    forge11202Runtime("commons-codec:commons-codec:1.10")
    forge11202Runtime("org.apache.logging.log4j:log4j-api:2.8.1")
    forge11202Runtime("org.apache.logging.log4j:log4j-core:2.8.1")
    forge11202Runtime(implementation("com.google.code.gson:gson:2.8.0"))
    forge11202Runtime("com.google.guava:guava:21.0")
    forge11202Runtime("com.mojang:authlib:1.5.25")
    // Forge
    forge11202Runtime("net.minecraftforge:forge:1.12.2-14.23.5.2860:universal")
    forge11202Runtime("lzma:lzma:0.0.1")
    forge11202Runtime("org.apache.maven:maven-artifact:3.5.3")

    // Mixin 0.8
    runtimeOnly("org.ow2.asm:asm-commons:6.2")
    runtimeOnly("com.google.guava:guava:21.0")
    // ArchLoom-based launching in dev
    implementation("net.fabricmc:dev-launch-injector:0.2.1+build.8")

    exampleModImplementation(project(":stage0:launchwrapper"))
    exampleModCompileOnly(launchwrapper)
    exampleModCompileOnly(forge)
    exampleModCompileOnly("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
    }

    mixin07("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
    }
    mixin08("org.spongepowered:mixin:0.8.2") {
        transitive = false
    }
    asm52("org.ow2.asm:asm-debug-all:5.2")

    oldKotlinModCompileOnly(forge)

    essentialCompileOnly(launchwrapper)
    essentialCompileOnly(forge)

    dummyStage1CompileOnly(launchwrapper)
    dummyStage2CompileOnly(launchwrapper)
    dummyStage3CompileOnly(launchwrapper)
}

def integrationTest = tasks.register("integrationTest", Test) {
    testClassesDirs = sourceSets.main.output.classesDirs
    classpath = sourceSets.main.runtimeClasspath

    useJUnitPlatform()

    inputs.dir(tasks.setupDownloadsApi.destinationDir)
    dependsOn(tasks.setupDownloadsApi)
}
check.dependsOn(integrationTest)

def includeMixin(AbstractArchiveTask task, Configuration mixin) {
    task.dependsOn(mixin)
    task.from({ mixin.collect { zipTree(it) } }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    }
}

def configureExampleModJar = { String tweaker, Configuration mixin = null -> return { AbstractArchiveTask task ->
    archiveBaseName.set(name)
    from(sourceSets.exampleMod.output)
    dependsOn(configurations.exampleModRuntimeClasspath)
    from({ configurations.exampleModRuntimeClasspath.collect { zipTree(it) } })

    manifest {
        attributes "FMLCorePlugin": "com.example.mod.ExampleCoreMod",
                "FMLCorePluginContainsFMLMod": "Yes, yes it does",
                "ForceLoadAsMod": "true",
                "TweakClass": tweaker,
                "TweakOrder": "0"
    }

    if (mixin != null) {
        includeMixin(task, mixin)
        manifest.attributes "MixinConfigs": "examplemod.mixins.json,examplemod.init.mixins.json"
    }
} }

def configureExample2ModJar = { String tweaker, Configuration mixin = null -> return { AbstractArchiveTask task ->
    archiveBaseName.set(name)
    from(sourceSets.example2Mod.output)
    dependsOn(configurations.example2ModRuntimeClasspath)
    from({ configurations.example2ModRuntimeClasspath.collect { zipTree(it) } })

    manifest {
        attributes "FMLCorePlugin": "com.example.mod2.ExampleCoreMod",
                "FMLCorePluginContainsFMLMod": "Yes, yes it does",
                "ForceLoadAsMod": "true",
                "TweakClass": tweaker,
                "TweakOrder": "0"
    }

    if (mixin != null) {
        includeMixin(task, mixin)
        manifest.attributes "MixinConfigs": "example2mod.mixins.json"
    }
} }

tasks.register("exampleModJar", Jar, configureExampleModJar("com.example.mod.tweaker.ExampleModTweaker"))
tasks.register("example2ModJar", Jar, configureExample2ModJar("com.example.mod2.tweaker.ExampleModTweaker"))
tasks.register("exampleModEssentialTweakerJar", Jar, configureExampleModJar("gg.essential.loader.stage0.EssentialSetupTweaker"))
tasks.register("example2ModEssentialTweakerJar", Jar, configureExample2ModJar("gg.essential.loader.stage0.EssentialSetupTweaker"))

tasks.register("exampleModWithMixin07Jar", Jar, configureExampleModJar("com.example.mod.tweaker.ExampleModTweaker", configurations.mixin07))
tasks.register("example2ModWithMixin07Jar", Jar, configureExample2ModJar("com.example.mod2.tweaker.ExampleModTweaker", configurations.mixin07))
tasks.register("exampleModEssentialTweakerWithMixin07Jar", Jar, configureExampleModJar("gg.essential.loader.stage0.EssentialSetupTweaker", configurations.mixin07))
tasks.register("example2ModEssentialTweakerWithMixin07Jar", Jar, configureExample2ModJar("gg.essential.loader.stage0.EssentialSetupTweaker", configurations.mixin07))
tasks.register("exampleModMixinTweakerWithMixin07Jar", Jar, configureExampleModJar("org.spongepowered.asm.launch.MixinTweaker", configurations.mixin07))
tasks.register("example2ModMixinTweakerWithMixin07Jar", Jar, configureExample2ModJar("org.spongepowered.asm.launch.MixinTweaker", configurations.mixin07))

tasks.register("exampleModWithMixin08Jar", Jar, configureExampleModJar("com.example.mod.tweaker.ExampleModTweaker", configurations.mixin08))
tasks.register("example2ModWithMixin08Jar", Jar, configureExample2ModJar("com.example.mod2.tweaker.ExampleModTweaker", configurations.mixin08))
tasks.register("exampleModEssentialTweakerWithMixin08Jar", Jar, configureExampleModJar("gg.essential.loader.stage0.EssentialSetupTweaker", configurations.mixin08))
tasks.register("example2ModEssentialTweakerWithMixin08Jar", Jar, configureExample2ModJar("gg.essential.loader.stage0.EssentialSetupTweaker", configurations.mixin08))
tasks.register("exampleModMixinTweakerWithMixin08Jar", Jar, configureExampleModJar("org.spongepowered.asm.launch.MixinTweaker", configurations.mixin08))
tasks.register("example2ModMixinTweakerWithMixin08Jar", Jar, configureExample2ModJar("org.spongepowered.asm.launch.MixinTweaker", configurations.mixin08))

tasks.register("oldKotlinModJar", Jar) {
    archiveBaseName.set("oldKotlinMod")
    from(sourceSets.oldKotlinMod.output)
    manifest {
        attributes "FMLCorePlugin": "com.example.oldkotlin.CoreMod"
    }
}

tasks.register("essentialJar", Jar) {
    archiveBaseName.set("essential")
    from(sourceSets.essential.output)
    includeMixin(it, configurations.mixin07)
}

tasks.register("essentialWithMixin08Jar", Jar) {
    archiveBaseName.set("essential-mixin08")
    from(sourceSets.essential.output)
    includeMixin(it, configurations.mixin08)
}

tasks.register("essentialWithAsm52Jar", Jar) {
    archiveBaseName.set("essential-asm52")
    from(sourceSets.essential.output)
    includeMixin(it, configurations.mixin07)

    dependsOn(configurations.asm52)
    from({ configurations.asm52.collect { zipTree(it) } })
}

tasks.register("dummyStage1Jar", Jar) {
    archiveBaseName.set("dummyStage1")
    from(sourceSets.dummyStage1.output)
    manifest {
        attributes("Name": "gg/essential/loader/stage1/")
        attributes("Implementation-Version": 999999)
    }
}

tasks.register("dummyStage2Jar", Jar) {
    archiveBaseName.set("dummyStage2")
    from(sourceSets.dummyStage2.output)
}

tasks.register("dummyStage3Jar", Jar) {
    archiveBaseName.set("dummyStage3")
    from(sourceSets.dummyStage3.output)
    includeMixin(it, configurations.mixin07)
}

tasks.register("forge10808Jar", Jar) {
    archiveBaseName.set("forge-10808")

    from(sourceSets.minecraft10808.output)
    dependsOn(configurations.forge10808Runtime)
    from({ configurations.forge10808Runtime.collect { zipTree(it) } }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        exclude 'net/minecraftforge/fml/common/launcher/TerminalTweaker.class'
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register("forge11202Jar", Jar) {
    archiveBaseName.set("forge-11202")

    from(sourceSets.minecraft11202.output)
    dependsOn(configurations.forge11202Runtime)
    from({ configurations.forge11202Runtime.collect { zipTree(it) } }) {
        exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
        exclude 'net/minecraftforge/fml/common/launcher/TerminalTweaker.class'
    }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register("setupDownloadsApi", Sync) {
    def downloadsApi = new File(project.buildDir, "downloadsApi")
    into(downloadsApi)

    def platformMod = { Provider<RegularFile> source, String mod, String branch, String platform ->
        def dst = "v1/mods/${mod.replace(':', '/')}/updates/$branch/$platform"
        def dstJar = "${dst}.jar"
        preserve.include(dst)
        preserve.include(dstJar)
        from(source) {
            rename { dstJar }
        }
        doLast {
            def file = new File(downloadsApi, dstJar).absoluteFile
            new File(downloadsApi, dst).write("""{ "url": "${file.toURI()}", "checksum": "${file.bytes.md5()}" }""")
        }
    }
    def platformForge10808 = "forge_1-8-8"
    def platformForge11202 = "forge_1-12-2"
    def mod = { Provider<RegularFile> source, String mod, String branch ->
        platformMod(source, mod, branch, platformForge10808)
        platformMod(source, mod, branch, platformForge11202)
    }

    mod(tasks.exampleModJar.archiveFile, "example:mod", "stable")
    mod(tasks.example2ModJar.archiveFile, "example:mod2", "stable")
    mod(tasks.exampleModEssentialTweakerJar.archiveFile, "example:mod", "essential-tweaker")
    mod(tasks.example2ModEssentialTweakerJar.archiveFile, "example:mod2", "essential-tweaker")

    mod(tasks.exampleModWithMixin07Jar.archiveFile, "example:mod", "stable-with-mixin-07")
    mod(tasks.example2ModWithMixin07Jar.archiveFile, "example:mod2", "stable-with-mixin-07")
    mod(tasks.exampleModEssentialTweakerWithMixin07Jar.archiveFile, "example:mod", "essential-tweaker-with-mixin-07")
    mod(tasks.example2ModEssentialTweakerWithMixin07Jar.archiveFile, "example:mod2", "essential-tweaker-with-mixin-07")
    mod(tasks.exampleModMixinTweakerWithMixin07Jar.archiveFile, "example:mod", "mixin-tweaker-with-mixin-07")
    mod(tasks.example2ModMixinTweakerWithMixin07Jar.archiveFile, "example:mod2", "mixin-tweaker-with-mixin-07")

    mod(tasks.exampleModWithMixin08Jar.archiveFile, "example:mod", "stable-with-mixin-08")
    mod(tasks.example2ModWithMixin08Jar.archiveFile, "example:mod2", "stable-with-mixin-08")
    mod(tasks.exampleModEssentialTweakerWithMixin08Jar.archiveFile, "example:mod", "essential-tweaker-with-mixin-08")
    mod(tasks.example2ModEssentialTweakerWithMixin08Jar.archiveFile, "example:mod2", "essential-tweaker-with-mixin-08")
    mod(tasks.exampleModMixinTweakerWithMixin08Jar.archiveFile, "example:mod", "mixin-tweaker-with-mixin-08")
    mod(tasks.example2ModMixinTweakerWithMixin08Jar.archiveFile, "example:mod2", "mixin-tweaker-with-mixin-08")

    mod(tasks.oldKotlinModJar.archiveFile, "example:kotlin", "old")

    mod(evaluationDependsOn(':stage2:launchwrapper').tasks.jar.archiveFile, "essential:loader-stage2", "stable")
    mod(tasks.essentialJar.archiveFile, "essential:essential", "stable")
    mod(tasks.essentialWithMixin08Jar.archiveFile, "essential:essential", "mixin-08")
    mod(tasks.essentialWithAsm52Jar.archiveFile, "essential:essential", "asm-52")
    mod(provider { configurations.mixin07.singleFile }, "essential:mixin", "07")
    mod(evaluationDependsOn(':stage0:launchwrapper').tasks.jar.archiveFile, "essential:loader-stage0", "stable")
    mod(tasks.dummyStage1Jar.archiveFile, "essential:loader-stage1", "dummy")
    mod(tasks.dummyStage2Jar.archiveFile, "essential:loader-stage2", "dummy")
    mod(tasks.dummyStage3Jar.archiveFile, "essential:essential", "dummy")

    platformMod(tasks.forge10808Jar.archiveFile, "forge:runtime", "stable", platformForge10808)
    platformMod(tasks.forge11202Jar.archiveFile, "forge:runtime", "stable", platformForge11202)
}
